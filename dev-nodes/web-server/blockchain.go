package main

import (
   // "context"
   // "crypto/ecdsa"
   // "fmt"
   // "log"
   // "math/big"
   "strings"

    "github.com/ethereum/go-ethereum/accounts/abi"
    "github.com/ethereum/go-ethereum/accounts/abi/bind"
    "github.com/ethereum/go-ethereum/common"

  //  "github.com/ethereum/go-ethereum/crypto"
  //  "github.com/ethereum/go-ethereum/ethclient"

   // store "../../contracts" 

)

var contractABI = `[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"string","name":"alarmString","type":"string"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"string","name":"lat","type":"string"},{"internalType":"string","name":"long","type":"string"}],"name":"alarm","outputs":[{"internalType":"int256","name":"result","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"alarmId","type":"uint256"}],"name":"getAlarm","outputs":[{"internalType":"string","name":"accountId","type":"string"},{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwnerAddress","outputs":[{"internalType":"address","name":"ownerAddress","type":"address"}],"stateMutability":"view","type":"function"}]`

var contractBin = `60806040523480156100115760006000fd5b505b6000600160005081909090555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610067565b610620806100766000396000f3fe60806040523480156100115760006000fd5b50600436106100465760003560e01c806301b200351461004c5780630c4f65bd14610269578063bc1d1c99146102b357610046565b60006000fd5b610253600480360360808110156100635760006000fd5b81019080803590602001906401000000008111156100815760006000fd5b8201836020820111156100945760006000fd5b803590602001918460018302840111640100000000831117156100b75760006000fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090909192909091929080359060200190929190803590602001906401000000008111156101295760006000fd5b82018360208201111561013c5760006000fd5b8035906020019184600183028401116401000000008311171561015f5760006000fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050909091929090919290803590602001906401000000008111156101c75760006000fd5b8201836020820111156101da5760006000fd5b803590602001918460018302840111640100000000831117156101fd5760006000fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050909091929090919290505050610363565b6040518082815260200191505060405180910390f35b610271610421565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102e0600480360360208110156102ca5760006000fd5b8101908080359060200190929190505050610450565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156103275780820151818401525b60208101905061030b565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000836000600050600060016000505481526020019081526020016000206000506000016000508190909055508260006000506000600160005054815260200190815260200160002060005060010160005090805190602001906103c892919061053a565b5081600060005060006001600050548152602001908152602001600020600050600201600050908051906020019061040192919061053a565b50600160008181505480929190600101919050909055505b949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061044d565b90565b60606000600060005060008481526020019081526020016000206000506003016000508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050915081506000600050600084815260200190815260200160002060005060000160005054905080505b915091565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061057b57805160ff19168380011785556105ae565b828001600101855582156105ae579182015b828111156105ad578251826000509090559160200191906001019061058d565b5b5090506105bb91906105bf565b5090565b6105e791906105c9565b808211156105e357600081815060009055506001016105c9565b5090565b9056fea26469706673582212202526c6ffe8c4620baaf6071d84570da59a960bf44f548a661e88c559518b4b8664736f6c63430006030033`


var contractAddress= "0x3969509b5db6b786d0e0b12386405c0faee66414";

//func doit() {
//    client, err := ethclient.Dial("https://localhost:8545")
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    //privateKey, err := crypto.HexToECDSA("fad9c8855b740a0b7ed4c221dbad0f33a83a50cad6b3fe8d5817ac83d38b6a19")
//    privateKey, err := crypto.HexToECDSA("df504d175ae63abf209bad9dda965310d99559620550e74521a6798a41215f46")
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    publicKey := privateKey.Public()
//    publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)
//    if !ok {
//        log.Fatal("error casting public key to ECDSA")
//    }
//
//    fromAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
//    nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    gasPrice, err := client.SuggestGasPrice(context.Background())
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    auth := bind.NewKeyedTransactor(privateKey)
//    auth.Nonce = big.NewInt(int64(nonce))
//    auth.Value = big.NewInt(0)     // in wei
//    auth.GasLimit = uint64(300000) // in units
//    auth.GasPrice = gasPrice
//
//    address := common.HexToAddress(contractAddress)
//    instance, err := store.NewStore(address, client)
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    key := [32]byte{}
//    value := [32]byte{}
//    copy(key[:], []byte("foo"))
//    copy(value[:], []byte("bar"))
//
//    tx, err := instance.SetItem(auth, key, value)
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    fmt.Printf("tx sent: %s", tx.Hash().Hex()) // tx sent: 0x8d490e535678e9a24360e955d75b27ad307bdfb97a1dca51d0f3035dcee3e870
//
//    result, err := instance.Items(&bind.CallOpts{}, key)
//    if err != nil {
//        log.Fatal(err)
//    }
//
//    fmt.Println(string(result[:])) // "bar"
//}


func bindAlarmAccount(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor) (*bind.BoundContract, error) {
    parsed, err := abi.JSON(strings.NewReader(contractABI))
    if err != nil {
        return nil, err
    }
    return bind.NewBoundContract(address, parsed, caller, transactor, nil), nil
}

func triggerAlarm(){}
